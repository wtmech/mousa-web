import { defineData, type ClientSchema, a } from '@aws-amplify/backend';

const schema = a.schema({
  UserProfile: a.model({
    id: a.string(),
    owner: a.string(),
    userType: a.enum(['ARTIST', 'LISTENER']),
    displayName: a.string(),
    email: a.string(),
    profileImage: a.string(),
    createdAt: a.datetime(),
    updatedAt: a.datetime(),
  }),
  ArtistProfile: a.model({
    id: a.string(),
    owner: a.string(),
    userProfileId: a.string(),
    userProfile: a.belongsTo('UserProfile', 'userProfileId'),
    artistName: a.string(),
    bio: a.string(),
    genres: a.string().array(),
    socialLinks: a.json(),
    subscriptionTiers: a.hasMany('SubscriptionTier', 'artistProfileId'),
    releases: a.hasMany('Release', 'artistProfileId'),
    createdAt: a.datetime(),
    updatedAt: a.datetime(),
  }),
  Release: a.model({
    id: a.string(),
    artistProfileId: a.string(),
    artistProfile: a.belongsTo('ArtistProfile', 'artistProfileId'),
    title: a.string(),
    type: a.enum(['ALBUM', 'EP', 'SINGLE']),
    coverArtKey: a.string(),
    coverArtUrl: a.string(),
    price: a.float(),
    releaseDate: a.datetime(),
    tracks: a.hasMany('Track', 'releaseId'),
    status: a.enum(['DRAFT', 'PROCESSING', 'READY', 'PUBLISHED', 'ERROR']),
    createdAt: a.datetime(),
    updatedAt: a.datetime(),
  }),
  Track: a.model({
    id: a.string(),
    releaseId: a.string(),
    release: a.belongsTo('Release', 'releaseId'),
    title: a.string(),
    trackNumber: a.integer(),
    originalFileKey: a.string(),
    streamingFileKey: a.string(),
    previewFileKey: a.string(),
    waveformData: a.string(),
    duration: a.integer(),
    status: a.enum(['PROCESSING', 'READY', 'ERROR']),
    createdAt: a.datetime(),
    updatedAt: a.datetime(),
  }),
  SubscriptionTier: a.model({
    id: a.string(),
    artistProfileId: a.string(),
    artistProfile: a.belongsTo('ArtistProfile', 'artistProfileId'),
    name: a.string(),
    price: a.float(),
    description: a.string(),
    benefits: a.string().array(),
    isActive: a.boolean(),
    createdAt: a.datetime(),
    updatedAt: a.datetime(),
  }),
  ArtistSubscription: a.model({
    id: a.string(),
    userProfileId: a.string(),
    userProfile: a.belongsTo('UserProfile', 'userProfileId'),
    artistProfileId: a.string(),
    artistProfile: a.belongsTo('ArtistProfile', 'artistProfileId'),
    subscriptionTierId: a.string(),
    subscriptionTier: a.belongsTo('SubscriptionTier', 'subscriptionTierId'),
    status: a.enum(['ACTIVE', 'PAST_DUE', 'CANCELLED']),
    stripeSubscriptionId: a.string(),
    currentPeriodEnd: a.datetime(),
    createdAt: a.datetime(),
    updatedAt: a.datetime(),
  }),
  Purchase: a.model({
    id: a.string(),
    userProfileId: a.string(),
    userProfile: a.belongsTo('UserProfile', 'userProfileId'),
    releaseId: a.string(),
    release: a.belongsTo('Release', 'releaseId'),
    amount: a.float(),
    artistAmount: a.float(),
    platformAmount: a.float(),
    currency: a.string(),
    stripePaymentIntentId: a.string(),
    purchasedAt: a.datetime(),
    createdAt: a.datetime(),
    updatedAt: a.datetime(),
  }),
});

export type Schema = ClientSchema<typeof schema>;

export const data = defineData({
  schema,
  authorizationModes: {
    defaultAuthorizationMode: 'userPool',
    // @ts-ignore - Type definitions are outdated
    additionalAuthorizationModes: [
      {
        mode: 'iam',
        allowedOperations: ['read'],
      },
    ],
  },
});